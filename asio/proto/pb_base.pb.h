// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pb_5fbase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pb_5fbase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pb_5fbase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pb_5fbase_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_5fbase_2eproto;
namespace ProtoBase {
class CommonRsp;
class CommonRspDefaultTypeInternal;
extern CommonRspDefaultTypeInternal _CommonRsp_default_instance_;
class HeartbeatReq;
class HeartbeatReqDefaultTypeInternal;
extern HeartbeatReqDefaultTypeInternal _HeartbeatReq_default_instance_;
class HeartbeatRsp;
class HeartbeatRspDefaultTypeInternal;
extern HeartbeatRspDefaultTypeInternal _HeartbeatRsp_default_instance_;
class SubscribeReq;
class SubscribeReqDefaultTypeInternal;
extern SubscribeReqDefaultTypeInternal _SubscribeReq_default_instance_;
class SubscribeRsp;
class SubscribeRspDefaultTypeInternal;
extern SubscribeRspDefaultTypeInternal _SubscribeRsp_default_instance_;
}  // namespace ProtoBase
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoBase::CommonRsp* Arena::CreateMaybeMessage<::ProtoBase::CommonRsp>(Arena*);
template<> ::ProtoBase::HeartbeatReq* Arena::CreateMaybeMessage<::ProtoBase::HeartbeatReq>(Arena*);
template<> ::ProtoBase::HeartbeatRsp* Arena::CreateMaybeMessage<::ProtoBase::HeartbeatRsp>(Arena*);
template<> ::ProtoBase::SubscribeReq* Arena::CreateMaybeMessage<::ProtoBase::SubscribeReq>(Arena*);
template<> ::ProtoBase::SubscribeRsp* Arena::CreateMaybeMessage<::ProtoBase::SubscribeRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProtoBase {

// ===================================================================

class SubscribeReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoBase.SubscribeReq) */ {
 public:
  inline SubscribeReq() : SubscribeReq(nullptr) {}
  virtual ~SubscribeReq();

  SubscribeReq(const SubscribeReq& from);
  SubscribeReq(SubscribeReq&& from) noexcept
    : SubscribeReq() {
    *this = ::std::move(from);
  }

  inline SubscribeReq& operator=(const SubscribeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeReq& operator=(SubscribeReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeReq* internal_default_instance() {
    return reinterpret_cast<const SubscribeReq*>(
               &_SubscribeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubscribeReq& a, SubscribeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeReq* New() const final {
    return CreateMaybeMessage<SubscribeReq>(nullptr);
  }

  SubscribeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeReq& from);
  void MergeFrom(const SubscribeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoBase.SubscribeReq";
  }
  protected:
  explicit SubscribeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_5fbase_2eproto);
    return ::descriptor_table_pb_5fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgTypeListFieldNumber = 2,
    kTypeNameListFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // repeated int32 msgTypeList = 2;
  int msgtypelist_size() const;
  private:
  int _internal_msgtypelist_size() const;
  public:
  void clear_msgtypelist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgtypelist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_msgtypelist() const;
  void _internal_add_msgtypelist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_msgtypelist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 msgtypelist(int index) const;
  void set_msgtypelist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_msgtypelist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      msgtypelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_msgtypelist();

  // repeated string typeNameList = 3;
  int typenamelist_size() const;
  private:
  int _internal_typenamelist_size() const;
  public:
  void clear_typenamelist();
  const std::string& typenamelist(int index) const;
  std::string* mutable_typenamelist(int index);
  void set_typenamelist(int index, const std::string& value);
  void set_typenamelist(int index, std::string&& value);
  void set_typenamelist(int index, const char* value);
  void set_typenamelist(int index, const char* value, size_t size);
  std::string* add_typenamelist();
  void add_typenamelist(const std::string& value);
  void add_typenamelist(std::string&& value);
  void add_typenamelist(const char* value);
  void add_typenamelist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& typenamelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_typenamelist();
  private:
  const std::string& _internal_typenamelist(int index) const;
  std::string* _internal_add_typenamelist();
  public:

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoBase.SubscribeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > msgtypelist_;
  mutable std::atomic<int> _msgtypelist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> typenamelist_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_5fbase_2eproto;
};
// -------------------------------------------------------------------

class SubscribeRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoBase.SubscribeRsp) */ {
 public:
  inline SubscribeRsp() : SubscribeRsp(nullptr) {}
  virtual ~SubscribeRsp();

  SubscribeRsp(const SubscribeRsp& from);
  SubscribeRsp(SubscribeRsp&& from) noexcept
    : SubscribeRsp() {
    *this = ::std::move(from);
  }

  inline SubscribeRsp& operator=(const SubscribeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeRsp& operator=(SubscribeRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeRsp* internal_default_instance() {
    return reinterpret_cast<const SubscribeRsp*>(
               &_SubscribeRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SubscribeRsp& a, SubscribeRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeRsp* New() const final {
    return CreateMaybeMessage<SubscribeRsp>(nullptr);
  }

  SubscribeRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeRsp& from);
  void MergeFrom(const SubscribeRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoBase.SubscribeRsp";
  }
  protected:
  explicit SubscribeRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_5fbase_2eproto);
    return ::descriptor_table_pb_5fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorcodeFieldNumber = 1,
  };
  // int32 errorcode = 1;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoBase.SubscribeRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_5fbase_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoBase.HeartbeatReq) */ {
 public:
  inline HeartbeatReq() : HeartbeatReq(nullptr) {}
  virtual ~HeartbeatReq();

  HeartbeatReq(const HeartbeatReq& from);
  HeartbeatReq(HeartbeatReq&& from) noexcept
    : HeartbeatReq() {
    *this = ::std::move(from);
  }

  inline HeartbeatReq& operator=(const HeartbeatReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatReq& operator=(HeartbeatReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeartbeatReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartbeatReq* internal_default_instance() {
    return reinterpret_cast<const HeartbeatReq*>(
               &_HeartbeatReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HeartbeatReq& a, HeartbeatReq& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatReq* New() const final {
    return CreateMaybeMessage<HeartbeatReq>(nullptr);
  }

  HeartbeatReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeartbeatReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeartbeatReq& from);
  void MergeFrom(const HeartbeatReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoBase.HeartbeatReq";
  }
  protected:
  explicit HeartbeatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_5fbase_2eproto);
    return ::descriptor_table_pb_5fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuFieldNumber = 1,
    kMemoryFieldNumber = 2,
  };
  // int32 cpu = 1;
  void clear_cpu();
  ::PROTOBUF_NAMESPACE_ID::int32 cpu() const;
  void set_cpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cpu() const;
  void _internal_set_cpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 memory = 2;
  void clear_memory();
  ::PROTOBUF_NAMESPACE_ID::int32 memory() const;
  void set_memory(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_memory() const;
  void _internal_set_memory(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoBase.HeartbeatReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cpu_;
  ::PROTOBUF_NAMESPACE_ID::int32 memory_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_5fbase_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoBase.HeartbeatRsp) */ {
 public:
  inline HeartbeatRsp() : HeartbeatRsp(nullptr) {}
  virtual ~HeartbeatRsp();

  HeartbeatRsp(const HeartbeatRsp& from);
  HeartbeatRsp(HeartbeatRsp&& from) noexcept
    : HeartbeatRsp() {
    *this = ::std::move(from);
  }

  inline HeartbeatRsp& operator=(const HeartbeatRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatRsp& operator=(HeartbeatRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeartbeatRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartbeatRsp* internal_default_instance() {
    return reinterpret_cast<const HeartbeatRsp*>(
               &_HeartbeatRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HeartbeatRsp& a, HeartbeatRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatRsp* New() const final {
    return CreateMaybeMessage<HeartbeatRsp>(nullptr);
  }

  HeartbeatRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeartbeatRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeartbeatRsp& from);
  void MergeFrom(const HeartbeatRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoBase.HeartbeatRsp";
  }
  protected:
  explicit HeartbeatRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_5fbase_2eproto);
    return ::descriptor_table_pb_5fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerTimeFieldNumber = 1,
  };
  // int64 serverTime = 1;
  void clear_servertime();
  ::PROTOBUF_NAMESPACE_ID::int64 servertime() const;
  void set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_servertime() const;
  void _internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoBase.HeartbeatRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 servertime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CommonRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoBase.CommonRsp) */ {
 public:
  inline CommonRsp() : CommonRsp(nullptr) {}
  virtual ~CommonRsp();

  CommonRsp(const CommonRsp& from);
  CommonRsp(CommonRsp&& from) noexcept
    : CommonRsp() {
    *this = ::std::move(from);
  }

  inline CommonRsp& operator=(const CommonRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonRsp& operator=(CommonRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonRsp* internal_default_instance() {
    return reinterpret_cast<const CommonRsp*>(
               &_CommonRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CommonRsp& a, CommonRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonRsp* New() const final {
    return CreateMaybeMessage<CommonRsp>(nullptr);
  }

  CommonRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonRsp& from);
  void MergeFrom(const CommonRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoBase.CommonRsp";
  }
  protected:
  explicit CommonRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_5fbase_2eproto);
    return ::descriptor_table_pb_5fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoBase.CommonRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_5fbase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubscribeReq

// int32 type = 1;
inline void SubscribeReq::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscribeReq::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscribeReq::type() const {
  // @@protoc_insertion_point(field_get:ProtoBase.SubscribeReq.type)
  return _internal_type();
}
inline void SubscribeReq::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SubscribeReq::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ProtoBase.SubscribeReq.type)
}

// repeated int32 msgTypeList = 2;
inline int SubscribeReq::_internal_msgtypelist_size() const {
  return msgtypelist_.size();
}
inline int SubscribeReq::msgtypelist_size() const {
  return _internal_msgtypelist_size();
}
inline void SubscribeReq::clear_msgtypelist() {
  msgtypelist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscribeReq::_internal_msgtypelist(int index) const {
  return msgtypelist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscribeReq::msgtypelist(int index) const {
  // @@protoc_insertion_point(field_get:ProtoBase.SubscribeReq.msgTypeList)
  return _internal_msgtypelist(index);
}
inline void SubscribeReq::set_msgtypelist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  msgtypelist_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoBase.SubscribeReq.msgTypeList)
}
inline void SubscribeReq::_internal_add_msgtypelist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  msgtypelist_.Add(value);
}
inline void SubscribeReq::add_msgtypelist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_msgtypelist(value);
  // @@protoc_insertion_point(field_add:ProtoBase.SubscribeReq.msgTypeList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SubscribeReq::_internal_msgtypelist() const {
  return msgtypelist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SubscribeReq::msgtypelist() const {
  // @@protoc_insertion_point(field_list:ProtoBase.SubscribeReq.msgTypeList)
  return _internal_msgtypelist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SubscribeReq::_internal_mutable_msgtypelist() {
  return &msgtypelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SubscribeReq::mutable_msgtypelist() {
  // @@protoc_insertion_point(field_mutable_list:ProtoBase.SubscribeReq.msgTypeList)
  return _internal_mutable_msgtypelist();
}

// repeated string typeNameList = 3;
inline int SubscribeReq::_internal_typenamelist_size() const {
  return typenamelist_.size();
}
inline int SubscribeReq::typenamelist_size() const {
  return _internal_typenamelist_size();
}
inline void SubscribeReq::clear_typenamelist() {
  typenamelist_.Clear();
}
inline std::string* SubscribeReq::add_typenamelist() {
  // @@protoc_insertion_point(field_add_mutable:ProtoBase.SubscribeReq.typeNameList)
  return _internal_add_typenamelist();
}
inline const std::string& SubscribeReq::_internal_typenamelist(int index) const {
  return typenamelist_.Get(index);
}
inline const std::string& SubscribeReq::typenamelist(int index) const {
  // @@protoc_insertion_point(field_get:ProtoBase.SubscribeReq.typeNameList)
  return _internal_typenamelist(index);
}
inline std::string* SubscribeReq::mutable_typenamelist(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoBase.SubscribeReq.typeNameList)
  return typenamelist_.Mutable(index);
}
inline void SubscribeReq::set_typenamelist(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ProtoBase.SubscribeReq.typeNameList)
  typenamelist_.Mutable(index)->assign(value);
}
inline void SubscribeReq::set_typenamelist(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ProtoBase.SubscribeReq.typeNameList)
  typenamelist_.Mutable(index)->assign(std::move(value));
}
inline void SubscribeReq::set_typenamelist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  typenamelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoBase.SubscribeReq.typeNameList)
}
inline void SubscribeReq::set_typenamelist(int index, const char* value, size_t size) {
  typenamelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoBase.SubscribeReq.typeNameList)
}
inline std::string* SubscribeReq::_internal_add_typenamelist() {
  return typenamelist_.Add();
}
inline void SubscribeReq::add_typenamelist(const std::string& value) {
  typenamelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ProtoBase.SubscribeReq.typeNameList)
}
inline void SubscribeReq::add_typenamelist(std::string&& value) {
  typenamelist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ProtoBase.SubscribeReq.typeNameList)
}
inline void SubscribeReq::add_typenamelist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  typenamelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ProtoBase.SubscribeReq.typeNameList)
}
inline void SubscribeReq::add_typenamelist(const char* value, size_t size) {
  typenamelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ProtoBase.SubscribeReq.typeNameList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SubscribeReq::typenamelist() const {
  // @@protoc_insertion_point(field_list:ProtoBase.SubscribeReq.typeNameList)
  return typenamelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SubscribeReq::mutable_typenamelist() {
  // @@protoc_insertion_point(field_mutable_list:ProtoBase.SubscribeReq.typeNameList)
  return &typenamelist_;
}

// -------------------------------------------------------------------

// SubscribeRsp

// int32 errorcode = 1;
inline void SubscribeRsp::clear_errorcode() {
  errorcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscribeRsp::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscribeRsp::errorcode() const {
  // @@protoc_insertion_point(field_get:ProtoBase.SubscribeRsp.errorcode)
  return _internal_errorcode();
}
inline void SubscribeRsp::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorcode_ = value;
}
inline void SubscribeRsp::set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:ProtoBase.SubscribeRsp.errorcode)
}

// -------------------------------------------------------------------

// HeartbeatReq

// int32 cpu = 1;
inline void HeartbeatReq::clear_cpu() {
  cpu_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeartbeatReq::_internal_cpu() const {
  return cpu_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeartbeatReq::cpu() const {
  // @@protoc_insertion_point(field_get:ProtoBase.HeartbeatReq.cpu)
  return _internal_cpu();
}
inline void HeartbeatReq::_internal_set_cpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cpu_ = value;
}
inline void HeartbeatReq::set_cpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cpu(value);
  // @@protoc_insertion_point(field_set:ProtoBase.HeartbeatReq.cpu)
}

// int32 memory = 2;
inline void HeartbeatReq::clear_memory() {
  memory_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeartbeatReq::_internal_memory() const {
  return memory_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeartbeatReq::memory() const {
  // @@protoc_insertion_point(field_get:ProtoBase.HeartbeatReq.memory)
  return _internal_memory();
}
inline void HeartbeatReq::_internal_set_memory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  memory_ = value;
}
inline void HeartbeatReq::set_memory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_memory(value);
  // @@protoc_insertion_point(field_set:ProtoBase.HeartbeatReq.memory)
}

// -------------------------------------------------------------------

// HeartbeatRsp

// int64 serverTime = 1;
inline void HeartbeatRsp::clear_servertime() {
  servertime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HeartbeatRsp::_internal_servertime() const {
  return servertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HeartbeatRsp::servertime() const {
  // @@protoc_insertion_point(field_get:ProtoBase.HeartbeatRsp.serverTime)
  return _internal_servertime();
}
inline void HeartbeatRsp::_internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  servertime_ = value;
}
inline void HeartbeatRsp::set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_servertime(value);
  // @@protoc_insertion_point(field_set:ProtoBase.HeartbeatRsp.serverTime)
}

// -------------------------------------------------------------------

// CommonRsp

// int32 code = 1;
inline void CommonRsp::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonRsp::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonRsp::code() const {
  // @@protoc_insertion_point(field_get:ProtoBase.CommonRsp.code)
  return _internal_code();
}
inline void CommonRsp::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void CommonRsp::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:ProtoBase.CommonRsp.code)
}

// string msg = 2;
inline void CommonRsp::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommonRsp::msg() const {
  // @@protoc_insertion_point(field_get:ProtoBase.CommonRsp.msg)
  return _internal_msg();
}
inline void CommonRsp::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:ProtoBase.CommonRsp.msg)
}
inline std::string* CommonRsp::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:ProtoBase.CommonRsp.msg)
  return _internal_mutable_msg();
}
inline const std::string& CommonRsp::_internal_msg() const {
  return msg_.Get();
}
inline void CommonRsp::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommonRsp::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoBase.CommonRsp.msg)
}
inline void CommonRsp::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoBase.CommonRsp.msg)
}
inline void CommonRsp::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoBase.CommonRsp.msg)
}
inline std::string* CommonRsp::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommonRsp::release_msg() {
  // @@protoc_insertion_point(field_release:ProtoBase.CommonRsp.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonRsp::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoBase.CommonRsp.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBase

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pb_5fbase_2eproto
