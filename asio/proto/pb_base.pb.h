// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_base.proto

#ifndef PROTOBUF_pb_5fbase_2eproto__INCLUDED
#define PROTOBUF_pb_5fbase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_pb_5fbase_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSubscribeReqImpl();
void InitDefaultsSubscribeReq();
void InitDefaultsSubscribeRspImpl();
void InitDefaultsSubscribeRsp();
void InitDefaultsServerInfoPubImpl();
void InitDefaultsServerInfoPub();
void InitDefaultsHelloReqImpl();
void InitDefaultsHelloReq();
void InitDefaultsHelloRspImpl();
void InitDefaultsHelloRsp();
void InitDefaultsEchoReqImpl();
void InitDefaultsEchoReq();
void InitDefaultsEchoRspImpl();
void InitDefaultsEchoRsp();
void InitDefaultsHeartbeatReqImpl();
void InitDefaultsHeartbeatReq();
void InitDefaultsHeartbeatRspImpl();
void InitDefaultsHeartbeatRsp();
inline void InitDefaults() {
  InitDefaultsSubscribeReq();
  InitDefaultsSubscribeRsp();
  InitDefaultsServerInfoPub();
  InitDefaultsHelloReq();
  InitDefaultsHelloRsp();
  InitDefaultsEchoReq();
  InitDefaultsEchoRsp();
  InitDefaultsHeartbeatReq();
  InitDefaultsHeartbeatRsp();
}
}  // namespace protobuf_pb_5fbase_2eproto
namespace PbBase {
class EchoReq;
class EchoReqDefaultTypeInternal;
extern EchoReqDefaultTypeInternal _EchoReq_default_instance_;
class EchoRsp;
class EchoRspDefaultTypeInternal;
extern EchoRspDefaultTypeInternal _EchoRsp_default_instance_;
class HeartbeatReq;
class HeartbeatReqDefaultTypeInternal;
extern HeartbeatReqDefaultTypeInternal _HeartbeatReq_default_instance_;
class HeartbeatRsp;
class HeartbeatRspDefaultTypeInternal;
extern HeartbeatRspDefaultTypeInternal _HeartbeatRsp_default_instance_;
class HelloReq;
class HelloReqDefaultTypeInternal;
extern HelloReqDefaultTypeInternal _HelloReq_default_instance_;
class HelloRsp;
class HelloRspDefaultTypeInternal;
extern HelloRspDefaultTypeInternal _HelloRsp_default_instance_;
class ServerInfoPub;
class ServerInfoPubDefaultTypeInternal;
extern ServerInfoPubDefaultTypeInternal _ServerInfoPub_default_instance_;
class SubscribeReq;
class SubscribeReqDefaultTypeInternal;
extern SubscribeReqDefaultTypeInternal _SubscribeReq_default_instance_;
class SubscribeRsp;
class SubscribeRspDefaultTypeInternal;
extern SubscribeRspDefaultTypeInternal _SubscribeRsp_default_instance_;
}  // namespace PbBase
namespace PbBase {

// ===================================================================

class SubscribeReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PbBase.SubscribeReq) */ {
 public:
  SubscribeReq();
  virtual ~SubscribeReq();

  SubscribeReq(const SubscribeReq& from);

  inline SubscribeReq& operator=(const SubscribeReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscribeReq(SubscribeReq&& from) noexcept
    : SubscribeReq() {
    *this = ::std::move(from);
  }

  inline SubscribeReq& operator=(SubscribeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeReq* internal_default_instance() {
    return reinterpret_cast<const SubscribeReq*>(
               &_SubscribeReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SubscribeReq* other);
  friend void swap(SubscribeReq& a, SubscribeReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribeReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SubscribeReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SubscribeReq& from);
  void MergeFrom(const SubscribeReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SubscribeReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string typeNameList = 2;
  int typenamelist_size() const;
  void clear_typenamelist();
  static const int kTypeNameListFieldNumber = 2;
  const ::std::string& typenamelist(int index) const;
  ::std::string* mutable_typenamelist(int index);
  void set_typenamelist(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_typenamelist(int index, ::std::string&& value);
  #endif
  void set_typenamelist(int index, const char* value);
  void set_typenamelist(int index, const char* value, size_t size);
  ::std::string* add_typenamelist();
  void add_typenamelist(const ::std::string& value);
  #if LANG_CXX11
  void add_typenamelist(::std::string&& value);
  #endif
  void add_typenamelist(const char* value);
  void add_typenamelist(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& typenamelist() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_typenamelist();

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PbBase.SubscribeReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> typenamelist_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_5fbase_2eproto::TableStruct;
  friend void ::protobuf_pb_5fbase_2eproto::InitDefaultsSubscribeReqImpl();
};
// -------------------------------------------------------------------

class SubscribeRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PbBase.SubscribeRsp) */ {
 public:
  SubscribeRsp();
  virtual ~SubscribeRsp();

  SubscribeRsp(const SubscribeRsp& from);

  inline SubscribeRsp& operator=(const SubscribeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscribeRsp(SubscribeRsp&& from) noexcept
    : SubscribeRsp() {
    *this = ::std::move(from);
  }

  inline SubscribeRsp& operator=(SubscribeRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeRsp* internal_default_instance() {
    return reinterpret_cast<const SubscribeRsp*>(
               &_SubscribeRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SubscribeRsp* other);
  friend void swap(SubscribeRsp& a, SubscribeRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribeRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SubscribeRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SubscribeRsp& from);
  void MergeFrom(const SubscribeRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SubscribeRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 errorcode = 1;
  void clear_errorcode();
  static const int kErrorcodeFieldNumber = 1;
  ::google::protobuf::int32 errorcode() const;
  void set_errorcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PbBase.SubscribeRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 errorcode_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_5fbase_2eproto::TableStruct;
  friend void ::protobuf_pb_5fbase_2eproto::InitDefaultsSubscribeRspImpl();
};
// -------------------------------------------------------------------

class ServerInfoPub : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PbBase.ServerInfoPub) */ {
 public:
  ServerInfoPub();
  virtual ~ServerInfoPub();

  ServerInfoPub(const ServerInfoPub& from);

  inline ServerInfoPub& operator=(const ServerInfoPub& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfoPub(ServerInfoPub&& from) noexcept
    : ServerInfoPub() {
    *this = ::std::move(from);
  }

  inline ServerInfoPub& operator=(ServerInfoPub&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfoPub& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfoPub* internal_default_instance() {
    return reinterpret_cast<const ServerInfoPub*>(
               &_ServerInfoPub_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ServerInfoPub* other);
  friend void swap(ServerInfoPub& a, ServerInfoPub& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoPub* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerInfoPub* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerInfoPub& from);
  void MergeFrom(const ServerInfoPub& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerInfoPub* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string hello = 1;
  void clear_hello();
  static const int kHelloFieldNumber = 1;
  const ::std::string& hello() const;
  void set_hello(const ::std::string& value);
  #if LANG_CXX11
  void set_hello(::std::string&& value);
  #endif
  void set_hello(const char* value);
  void set_hello(const char* value, size_t size);
  ::std::string* mutable_hello();
  ::std::string* release_hello();
  void set_allocated_hello(::std::string* hello);

  // @@protoc_insertion_point(class_scope:PbBase.ServerInfoPub)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hello_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_5fbase_2eproto::TableStruct;
  friend void ::protobuf_pb_5fbase_2eproto::InitDefaultsServerInfoPubImpl();
};
// -------------------------------------------------------------------

class HelloReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PbBase.HelloReq) */ {
 public:
  HelloReq();
  virtual ~HelloReq();

  HelloReq(const HelloReq& from);

  inline HelloReq& operator=(const HelloReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HelloReq(HelloReq&& from) noexcept
    : HelloReq() {
    *this = ::std::move(from);
  }

  inline HelloReq& operator=(HelloReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloReq* internal_default_instance() {
    return reinterpret_cast<const HelloReq*>(
               &_HelloReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(HelloReq* other);
  friend void swap(HelloReq& a, HelloReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HelloReq* New() const PROTOBUF_FINAL { return New(NULL); }

  HelloReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HelloReq& from);
  void MergeFrom(const HelloReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HelloReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes address = 3;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PbBase.HelloReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_5fbase_2eproto::TableStruct;
  friend void ::protobuf_pb_5fbase_2eproto::InitDefaultsHelloReqImpl();
};
// -------------------------------------------------------------------

class HelloRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PbBase.HelloRsp) */ {
 public:
  HelloRsp();
  virtual ~HelloRsp();

  HelloRsp(const HelloRsp& from);

  inline HelloRsp& operator=(const HelloRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HelloRsp(HelloRsp&& from) noexcept
    : HelloRsp() {
    *this = ::std::move(from);
  }

  inline HelloRsp& operator=(HelloRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloRsp* internal_default_instance() {
    return reinterpret_cast<const HelloRsp*>(
               &_HelloRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(HelloRsp* other);
  friend void swap(HelloRsp& a, HelloRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HelloRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  HelloRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HelloRsp& from);
  void MergeFrom(const HelloRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HelloRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes hello = 1;
  void clear_hello();
  static const int kHelloFieldNumber = 1;
  const ::std::string& hello() const;
  void set_hello(const ::std::string& value);
  #if LANG_CXX11
  void set_hello(::std::string&& value);
  #endif
  void set_hello(const char* value);
  void set_hello(const void* value, size_t size);
  ::std::string* mutable_hello();
  ::std::string* release_hello();
  void set_allocated_hello(::std::string* hello);

  // @@protoc_insertion_point(class_scope:PbBase.HelloRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hello_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_5fbase_2eproto::TableStruct;
  friend void ::protobuf_pb_5fbase_2eproto::InitDefaultsHelloRspImpl();
};
// -------------------------------------------------------------------

class EchoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PbBase.EchoReq) */ {
 public:
  EchoReq();
  virtual ~EchoReq();

  EchoReq(const EchoReq& from);

  inline EchoReq& operator=(const EchoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EchoReq(EchoReq&& from) noexcept
    : EchoReq() {
    *this = ::std::move(from);
  }

  inline EchoReq& operator=(EchoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoReq* internal_default_instance() {
    return reinterpret_cast<const EchoReq*>(
               &_EchoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(EchoReq* other);
  friend void swap(EchoReq& a, EchoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EchoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  EchoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EchoReq& from);
  void MergeFrom(const EchoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EchoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:PbBase.EchoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_5fbase_2eproto::TableStruct;
  friend void ::protobuf_pb_5fbase_2eproto::InitDefaultsEchoReqImpl();
};
// -------------------------------------------------------------------

class EchoRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PbBase.EchoRsp) */ {
 public:
  EchoRsp();
  virtual ~EchoRsp();

  EchoRsp(const EchoRsp& from);

  inline EchoRsp& operator=(const EchoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EchoRsp(EchoRsp&& from) noexcept
    : EchoRsp() {
    *this = ::std::move(from);
  }

  inline EchoRsp& operator=(EchoRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoRsp* internal_default_instance() {
    return reinterpret_cast<const EchoRsp*>(
               &_EchoRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(EchoRsp* other);
  friend void swap(EchoRsp& a, EchoRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EchoRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  EchoRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EchoRsp& from);
  void MergeFrom(const EchoRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EchoRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // int32 errorcode = 1;
  void clear_errorcode();
  static const int kErrorcodeFieldNumber = 1;
  ::google::protobuf::int32 errorcode() const;
  void set_errorcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PbBase.EchoRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::int32 errorcode_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_5fbase_2eproto::TableStruct;
  friend void ::protobuf_pb_5fbase_2eproto::InitDefaultsEchoRspImpl();
};
// -------------------------------------------------------------------

class HeartbeatReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PbBase.HeartbeatReq) */ {
 public:
  HeartbeatReq();
  virtual ~HeartbeatReq();

  HeartbeatReq(const HeartbeatReq& from);

  inline HeartbeatReq& operator=(const HeartbeatReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeartbeatReq(HeartbeatReq&& from) noexcept
    : HeartbeatReq() {
    *this = ::std::move(from);
  }

  inline HeartbeatReq& operator=(HeartbeatReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartbeatReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartbeatReq* internal_default_instance() {
    return reinterpret_cast<const HeartbeatReq*>(
               &_HeartbeatReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(HeartbeatReq* other);
  friend void swap(HeartbeatReq& a, HeartbeatReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatReq* New() const PROTOBUF_FINAL { return New(NULL); }

  HeartbeatReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HeartbeatReq& from);
  void MergeFrom(const HeartbeatReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HeartbeatReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 cpu = 1;
  void clear_cpu();
  static const int kCpuFieldNumber = 1;
  ::google::protobuf::int32 cpu() const;
  void set_cpu(::google::protobuf::int32 value);

  // int32 memory = 2;
  void clear_memory();
  static const int kMemoryFieldNumber = 2;
  ::google::protobuf::int32 memory() const;
  void set_memory(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PbBase.HeartbeatReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 cpu_;
  ::google::protobuf::int32 memory_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_5fbase_2eproto::TableStruct;
  friend void ::protobuf_pb_5fbase_2eproto::InitDefaultsHeartbeatReqImpl();
};
// -------------------------------------------------------------------

class HeartbeatRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PbBase.HeartbeatRsp) */ {
 public:
  HeartbeatRsp();
  virtual ~HeartbeatRsp();

  HeartbeatRsp(const HeartbeatRsp& from);

  inline HeartbeatRsp& operator=(const HeartbeatRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeartbeatRsp(HeartbeatRsp&& from) noexcept
    : HeartbeatRsp() {
    *this = ::std::move(from);
  }

  inline HeartbeatRsp& operator=(HeartbeatRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartbeatRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartbeatRsp* internal_default_instance() {
    return reinterpret_cast<const HeartbeatRsp*>(
               &_HeartbeatRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(HeartbeatRsp* other);
  friend void swap(HeartbeatRsp& a, HeartbeatRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  HeartbeatRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HeartbeatRsp& from);
  void MergeFrom(const HeartbeatRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HeartbeatRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 serverTime = 1;
  void clear_servertime();
  static const int kServerTimeFieldNumber = 1;
  ::google::protobuf::int64 servertime() const;
  void set_servertime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PbBase.HeartbeatRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 servertime_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_5fbase_2eproto::TableStruct;
  friend void ::protobuf_pb_5fbase_2eproto::InitDefaultsHeartbeatRspImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubscribeReq

// int32 type = 1;
inline void SubscribeReq::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 SubscribeReq::type() const {
  // @@protoc_insertion_point(field_get:PbBase.SubscribeReq.type)
  return type_;
}
inline void SubscribeReq::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:PbBase.SubscribeReq.type)
}

// repeated string typeNameList = 2;
inline int SubscribeReq::typenamelist_size() const {
  return typenamelist_.size();
}
inline void SubscribeReq::clear_typenamelist() {
  typenamelist_.Clear();
}
inline const ::std::string& SubscribeReq::typenamelist(int index) const {
  // @@protoc_insertion_point(field_get:PbBase.SubscribeReq.typeNameList)
  return typenamelist_.Get(index);
}
inline ::std::string* SubscribeReq::mutable_typenamelist(int index) {
  // @@protoc_insertion_point(field_mutable:PbBase.SubscribeReq.typeNameList)
  return typenamelist_.Mutable(index);
}
inline void SubscribeReq::set_typenamelist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PbBase.SubscribeReq.typeNameList)
  typenamelist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SubscribeReq::set_typenamelist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:PbBase.SubscribeReq.typeNameList)
  typenamelist_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SubscribeReq::set_typenamelist(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  typenamelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PbBase.SubscribeReq.typeNameList)
}
inline void SubscribeReq::set_typenamelist(int index, const char* value, size_t size) {
  typenamelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbBase.SubscribeReq.typeNameList)
}
inline ::std::string* SubscribeReq::add_typenamelist() {
  // @@protoc_insertion_point(field_add_mutable:PbBase.SubscribeReq.typeNameList)
  return typenamelist_.Add();
}
inline void SubscribeReq::add_typenamelist(const ::std::string& value) {
  typenamelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PbBase.SubscribeReq.typeNameList)
}
#if LANG_CXX11
inline void SubscribeReq::add_typenamelist(::std::string&& value) {
  typenamelist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PbBase.SubscribeReq.typeNameList)
}
#endif
inline void SubscribeReq::add_typenamelist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  typenamelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PbBase.SubscribeReq.typeNameList)
}
inline void SubscribeReq::add_typenamelist(const char* value, size_t size) {
  typenamelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PbBase.SubscribeReq.typeNameList)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubscribeReq::typenamelist() const {
  // @@protoc_insertion_point(field_list:PbBase.SubscribeReq.typeNameList)
  return typenamelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SubscribeReq::mutable_typenamelist() {
  // @@protoc_insertion_point(field_mutable_list:PbBase.SubscribeReq.typeNameList)
  return &typenamelist_;
}

// -------------------------------------------------------------------

// SubscribeRsp

// int32 errorcode = 1;
inline void SubscribeRsp::clear_errorcode() {
  errorcode_ = 0;
}
inline ::google::protobuf::int32 SubscribeRsp::errorcode() const {
  // @@protoc_insertion_point(field_get:PbBase.SubscribeRsp.errorcode)
  return errorcode_;
}
inline void SubscribeRsp::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:PbBase.SubscribeRsp.errorcode)
}

// -------------------------------------------------------------------

// ServerInfoPub

// string hello = 1;
inline void ServerInfoPub::clear_hello() {
  hello_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoPub::hello() const {
  // @@protoc_insertion_point(field_get:PbBase.ServerInfoPub.hello)
  return hello_.GetNoArena();
}
inline void ServerInfoPub::set_hello(const ::std::string& value) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PbBase.ServerInfoPub.hello)
}
#if LANG_CXX11
inline void ServerInfoPub::set_hello(::std::string&& value) {
  
  hello_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PbBase.ServerInfoPub.hello)
}
#endif
inline void ServerInfoPub::set_hello(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PbBase.ServerInfoPub.hello)
}
inline void ServerInfoPub::set_hello(const char* value, size_t size) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PbBase.ServerInfoPub.hello)
}
inline ::std::string* ServerInfoPub::mutable_hello() {
  
  // @@protoc_insertion_point(field_mutable:PbBase.ServerInfoPub.hello)
  return hello_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoPub::release_hello() {
  // @@protoc_insertion_point(field_release:PbBase.ServerInfoPub.hello)
  
  return hello_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoPub::set_allocated_hello(::std::string* hello) {
  if (hello != NULL) {
    
  } else {
    
  }
  hello_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hello);
  // @@protoc_insertion_point(field_set_allocated:PbBase.ServerInfoPub.hello)
}

// -------------------------------------------------------------------

// HelloReq

// string name = 1;
inline void HelloReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloReq::name() const {
  // @@protoc_insertion_point(field_get:PbBase.HelloReq.name)
  return name_.GetNoArena();
}
inline void HelloReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PbBase.HelloReq.name)
}
#if LANG_CXX11
inline void HelloReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PbBase.HelloReq.name)
}
#endif
inline void HelloReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PbBase.HelloReq.name)
}
inline void HelloReq::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PbBase.HelloReq.name)
}
inline ::std::string* HelloReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:PbBase.HelloReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloReq::release_name() {
  // @@protoc_insertion_point(field_release:PbBase.HelloReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PbBase.HelloReq.name)
}

// int32 id = 2;
inline void HelloReq::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 HelloReq::id() const {
  // @@protoc_insertion_point(field_get:PbBase.HelloReq.id)
  return id_;
}
inline void HelloReq::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:PbBase.HelloReq.id)
}

// bytes address = 3;
inline void HelloReq::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloReq::address() const {
  // @@protoc_insertion_point(field_get:PbBase.HelloReq.address)
  return address_.GetNoArena();
}
inline void HelloReq::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PbBase.HelloReq.address)
}
#if LANG_CXX11
inline void HelloReq::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PbBase.HelloReq.address)
}
#endif
inline void HelloReq::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PbBase.HelloReq.address)
}
inline void HelloReq::set_address(const void* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PbBase.HelloReq.address)
}
inline ::std::string* HelloReq::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:PbBase.HelloReq.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloReq::release_address() {
  // @@protoc_insertion_point(field_release:PbBase.HelloReq.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloReq::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:PbBase.HelloReq.address)
}

// -------------------------------------------------------------------

// HelloRsp

// bytes hello = 1;
inline void HelloRsp::clear_hello() {
  hello_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloRsp::hello() const {
  // @@protoc_insertion_point(field_get:PbBase.HelloRsp.hello)
  return hello_.GetNoArena();
}
inline void HelloRsp::set_hello(const ::std::string& value) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PbBase.HelloRsp.hello)
}
#if LANG_CXX11
inline void HelloRsp::set_hello(::std::string&& value) {
  
  hello_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PbBase.HelloRsp.hello)
}
#endif
inline void HelloRsp::set_hello(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PbBase.HelloRsp.hello)
}
inline void HelloRsp::set_hello(const void* value, size_t size) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PbBase.HelloRsp.hello)
}
inline ::std::string* HelloRsp::mutable_hello() {
  
  // @@protoc_insertion_point(field_mutable:PbBase.HelloRsp.hello)
  return hello_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloRsp::release_hello() {
  // @@protoc_insertion_point(field_release:PbBase.HelloRsp.hello)
  
  return hello_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloRsp::set_allocated_hello(::std::string* hello) {
  if (hello != NULL) {
    
  } else {
    
  }
  hello_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hello);
  // @@protoc_insertion_point(field_set_allocated:PbBase.HelloRsp.hello)
}

// -------------------------------------------------------------------

// EchoReq

// bytes content = 1;
inline void EchoReq::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EchoReq::content() const {
  // @@protoc_insertion_point(field_get:PbBase.EchoReq.content)
  return content_.GetNoArena();
}
inline void EchoReq::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PbBase.EchoReq.content)
}
#if LANG_CXX11
inline void EchoReq::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PbBase.EchoReq.content)
}
#endif
inline void EchoReq::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PbBase.EchoReq.content)
}
inline void EchoReq::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PbBase.EchoReq.content)
}
inline ::std::string* EchoReq::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:PbBase.EchoReq.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EchoReq::release_content() {
  // @@protoc_insertion_point(field_release:PbBase.EchoReq.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EchoReq::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:PbBase.EchoReq.content)
}

// -------------------------------------------------------------------

// EchoRsp

// int32 errorcode = 1;
inline void EchoRsp::clear_errorcode() {
  errorcode_ = 0;
}
inline ::google::protobuf::int32 EchoRsp::errorcode() const {
  // @@protoc_insertion_point(field_get:PbBase.EchoRsp.errorcode)
  return errorcode_;
}
inline void EchoRsp::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:PbBase.EchoRsp.errorcode)
}

// bytes content = 2;
inline void EchoRsp::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EchoRsp::content() const {
  // @@protoc_insertion_point(field_get:PbBase.EchoRsp.content)
  return content_.GetNoArena();
}
inline void EchoRsp::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PbBase.EchoRsp.content)
}
#if LANG_CXX11
inline void EchoRsp::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PbBase.EchoRsp.content)
}
#endif
inline void EchoRsp::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PbBase.EchoRsp.content)
}
inline void EchoRsp::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PbBase.EchoRsp.content)
}
inline ::std::string* EchoRsp::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:PbBase.EchoRsp.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EchoRsp::release_content() {
  // @@protoc_insertion_point(field_release:PbBase.EchoRsp.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EchoRsp::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:PbBase.EchoRsp.content)
}

// -------------------------------------------------------------------

// HeartbeatReq

// int32 cpu = 1;
inline void HeartbeatReq::clear_cpu() {
  cpu_ = 0;
}
inline ::google::protobuf::int32 HeartbeatReq::cpu() const {
  // @@protoc_insertion_point(field_get:PbBase.HeartbeatReq.cpu)
  return cpu_;
}
inline void HeartbeatReq::set_cpu(::google::protobuf::int32 value) {
  
  cpu_ = value;
  // @@protoc_insertion_point(field_set:PbBase.HeartbeatReq.cpu)
}

// int32 memory = 2;
inline void HeartbeatReq::clear_memory() {
  memory_ = 0;
}
inline ::google::protobuf::int32 HeartbeatReq::memory() const {
  // @@protoc_insertion_point(field_get:PbBase.HeartbeatReq.memory)
  return memory_;
}
inline void HeartbeatReq::set_memory(::google::protobuf::int32 value) {
  
  memory_ = value;
  // @@protoc_insertion_point(field_set:PbBase.HeartbeatReq.memory)
}

// -------------------------------------------------------------------

// HeartbeatRsp

// int64 serverTime = 1;
inline void HeartbeatRsp::clear_servertime() {
  servertime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HeartbeatRsp::servertime() const {
  // @@protoc_insertion_point(field_get:PbBase.HeartbeatRsp.serverTime)
  return servertime_;
}
inline void HeartbeatRsp::set_servertime(::google::protobuf::int64 value) {
  
  servertime_ = value;
  // @@protoc_insertion_point(field_set:PbBase.HeartbeatRsp.serverTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PbBase

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pb_5fbase_2eproto__INCLUDED
