// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_simple.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pb_5fsimple_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pb_5fsimple_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pb_5fsimple_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pb_5fsimple_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_5fsimple_2eproto;
namespace ProtoSimple {
class DaytimeReq;
class DaytimeReqDefaultTypeInternal;
extern DaytimeReqDefaultTypeInternal _DaytimeReq_default_instance_;
class DaytimeRsp;
class DaytimeRspDefaultTypeInternal;
extern DaytimeRspDefaultTypeInternal _DaytimeRsp_default_instance_;
class DiscardReq;
class DiscardReqDefaultTypeInternal;
extern DiscardReqDefaultTypeInternal _DiscardReq_default_instance_;
class DiscardRsp;
class DiscardRspDefaultTypeInternal;
extern DiscardRspDefaultTypeInternal _DiscardRsp_default_instance_;
class PingPongReq;
class PingPongReqDefaultTypeInternal;
extern PingPongReqDefaultTypeInternal _PingPongReq_default_instance_;
class PingPongRsp;
class PingPongRspDefaultTypeInternal;
extern PingPongRspDefaultTypeInternal _PingPongRsp_default_instance_;
class ServerInfoPub;
class ServerInfoPubDefaultTypeInternal;
extern ServerInfoPubDefaultTypeInternal _ServerInfoPub_default_instance_;
class ServerInfoReq;
class ServerInfoReqDefaultTypeInternal;
extern ServerInfoReqDefaultTypeInternal _ServerInfoReq_default_instance_;
class ServerInfoRsp;
class ServerInfoRspDefaultTypeInternal;
extern ServerInfoRspDefaultTypeInternal _ServerInfoRsp_default_instance_;
}  // namespace ProtoSimple
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoSimple::DaytimeReq* Arena::CreateMaybeMessage<::ProtoSimple::DaytimeReq>(Arena*);
template<> ::ProtoSimple::DaytimeRsp* Arena::CreateMaybeMessage<::ProtoSimple::DaytimeRsp>(Arena*);
template<> ::ProtoSimple::DiscardReq* Arena::CreateMaybeMessage<::ProtoSimple::DiscardReq>(Arena*);
template<> ::ProtoSimple::DiscardRsp* Arena::CreateMaybeMessage<::ProtoSimple::DiscardRsp>(Arena*);
template<> ::ProtoSimple::PingPongReq* Arena::CreateMaybeMessage<::ProtoSimple::PingPongReq>(Arena*);
template<> ::ProtoSimple::PingPongRsp* Arena::CreateMaybeMessage<::ProtoSimple::PingPongRsp>(Arena*);
template<> ::ProtoSimple::ServerInfoPub* Arena::CreateMaybeMessage<::ProtoSimple::ServerInfoPub>(Arena*);
template<> ::ProtoSimple::ServerInfoReq* Arena::CreateMaybeMessage<::ProtoSimple::ServerInfoReq>(Arena*);
template<> ::ProtoSimple::ServerInfoRsp* Arena::CreateMaybeMessage<::ProtoSimple::ServerInfoRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProtoSimple {

// ===================================================================

class PingPongReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoSimple.PingPongReq) */ {
 public:
  inline PingPongReq() : PingPongReq(nullptr) {}
  virtual ~PingPongReq();

  PingPongReq(const PingPongReq& from);
  PingPongReq(PingPongReq&& from) noexcept
    : PingPongReq() {
    *this = ::std::move(from);
  }

  inline PingPongReq& operator=(const PingPongReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingPongReq& operator=(PingPongReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PingPongReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingPongReq* internal_default_instance() {
    return reinterpret_cast<const PingPongReq*>(
               &_PingPongReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PingPongReq& a, PingPongReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PingPongReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingPongReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingPongReq* New() const final {
    return CreateMaybeMessage<PingPongReq>(nullptr);
  }

  PingPongReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingPongReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PingPongReq& from);
  void MergeFrom(const PingPongReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingPongReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoSimple.PingPongReq";
  }
  protected:
  explicit PingPongReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_5fsimple_2eproto);
    return ::descriptor_table_pb_5fsimple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:ProtoSimple.PingPongReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_5fsimple_2eproto;
};
// -------------------------------------------------------------------

class PingPongRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoSimple.PingPongRsp) */ {
 public:
  inline PingPongRsp() : PingPongRsp(nullptr) {}
  virtual ~PingPongRsp();

  PingPongRsp(const PingPongRsp& from);
  PingPongRsp(PingPongRsp&& from) noexcept
    : PingPongRsp() {
    *this = ::std::move(from);
  }

  inline PingPongRsp& operator=(const PingPongRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingPongRsp& operator=(PingPongRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PingPongRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingPongRsp* internal_default_instance() {
    return reinterpret_cast<const PingPongRsp*>(
               &_PingPongRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PingPongRsp& a, PingPongRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(PingPongRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingPongRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingPongRsp* New() const final {
    return CreateMaybeMessage<PingPongRsp>(nullptr);
  }

  PingPongRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingPongRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PingPongRsp& from);
  void MergeFrom(const PingPongRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingPongRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoSimple.PingPongRsp";
  }
  protected:
  explicit PingPongRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_5fsimple_2eproto);
    return ::descriptor_table_pb_5fsimple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:ProtoSimple.PingPongRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_5fsimple_2eproto;
};
// -------------------------------------------------------------------

class DaytimeReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoSimple.DaytimeReq) */ {
 public:
  inline DaytimeReq() : DaytimeReq(nullptr) {}
  virtual ~DaytimeReq();

  DaytimeReq(const DaytimeReq& from);
  DaytimeReq(DaytimeReq&& from) noexcept
    : DaytimeReq() {
    *this = ::std::move(from);
  }

  inline DaytimeReq& operator=(const DaytimeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DaytimeReq& operator=(DaytimeReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DaytimeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DaytimeReq* internal_default_instance() {
    return reinterpret_cast<const DaytimeReq*>(
               &_DaytimeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DaytimeReq& a, DaytimeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DaytimeReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DaytimeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DaytimeReq* New() const final {
    return CreateMaybeMessage<DaytimeReq>(nullptr);
  }

  DaytimeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DaytimeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DaytimeReq& from);
  void MergeFrom(const DaytimeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DaytimeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoSimple.DaytimeReq";
  }
  protected:
  explicit DaytimeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_5fsimple_2eproto);
    return ::descriptor_table_pb_5fsimple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoSimple.DaytimeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_5fsimple_2eproto;
};
// -------------------------------------------------------------------

class DaytimeRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoSimple.DaytimeRsp) */ {
 public:
  inline DaytimeRsp() : DaytimeRsp(nullptr) {}
  virtual ~DaytimeRsp();

  DaytimeRsp(const DaytimeRsp& from);
  DaytimeRsp(DaytimeRsp&& from) noexcept
    : DaytimeRsp() {
    *this = ::std::move(from);
  }

  inline DaytimeRsp& operator=(const DaytimeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DaytimeRsp& operator=(DaytimeRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DaytimeRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DaytimeRsp* internal_default_instance() {
    return reinterpret_cast<const DaytimeRsp*>(
               &_DaytimeRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DaytimeRsp& a, DaytimeRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DaytimeRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DaytimeRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DaytimeRsp* New() const final {
    return CreateMaybeMessage<DaytimeRsp>(nullptr);
  }

  DaytimeRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DaytimeRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DaytimeRsp& from);
  void MergeFrom(const DaytimeRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DaytimeRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoSimple.DaytimeRsp";
  }
  protected:
  explicit DaytimeRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_5fsimple_2eproto);
    return ::descriptor_table_pb_5fsimple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // string time = 1;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // @@protoc_insertion_point(class_scope:ProtoSimple.DaytimeRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_5fsimple_2eproto;
};
// -------------------------------------------------------------------

class DiscardReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoSimple.DiscardReq) */ {
 public:
  inline DiscardReq() : DiscardReq(nullptr) {}
  virtual ~DiscardReq();

  DiscardReq(const DiscardReq& from);
  DiscardReq(DiscardReq&& from) noexcept
    : DiscardReq() {
    *this = ::std::move(from);
  }

  inline DiscardReq& operator=(const DiscardReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscardReq& operator=(DiscardReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiscardReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiscardReq* internal_default_instance() {
    return reinterpret_cast<const DiscardReq*>(
               &_DiscardReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DiscardReq& a, DiscardReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscardReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscardReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscardReq* New() const final {
    return CreateMaybeMessage<DiscardReq>(nullptr);
  }

  DiscardReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscardReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiscardReq& from);
  void MergeFrom(const DiscardReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscardReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoSimple.DiscardReq";
  }
  protected:
  explicit DiscardReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_5fsimple_2eproto);
    return ::descriptor_table_pb_5fsimple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:ProtoSimple.DiscardReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_5fsimple_2eproto;
};
// -------------------------------------------------------------------

class DiscardRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoSimple.DiscardRsp) */ {
 public:
  inline DiscardRsp() : DiscardRsp(nullptr) {}
  virtual ~DiscardRsp();

  DiscardRsp(const DiscardRsp& from);
  DiscardRsp(DiscardRsp&& from) noexcept
    : DiscardRsp() {
    *this = ::std::move(from);
  }

  inline DiscardRsp& operator=(const DiscardRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscardRsp& operator=(DiscardRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiscardRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiscardRsp* internal_default_instance() {
    return reinterpret_cast<const DiscardRsp*>(
               &_DiscardRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DiscardRsp& a, DiscardRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscardRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscardRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscardRsp* New() const final {
    return CreateMaybeMessage<DiscardRsp>(nullptr);
  }

  DiscardRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscardRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiscardRsp& from);
  void MergeFrom(const DiscardRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscardRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoSimple.DiscardRsp";
  }
  protected:
  explicit DiscardRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_5fsimple_2eproto);
    return ::descriptor_table_pb_5fsimple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
    kTotalFieldNumber = 2,
  };
  // int32 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total = 2;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoSimple.DiscardRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_5fsimple_2eproto;
};
// -------------------------------------------------------------------

class ServerInfoPub PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoSimple.ServerInfoPub) */ {
 public:
  inline ServerInfoPub() : ServerInfoPub(nullptr) {}
  virtual ~ServerInfoPub();

  ServerInfoPub(const ServerInfoPub& from);
  ServerInfoPub(ServerInfoPub&& from) noexcept
    : ServerInfoPub() {
    *this = ::std::move(from);
  }

  inline ServerInfoPub& operator=(const ServerInfoPub& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfoPub& operator=(ServerInfoPub&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerInfoPub& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfoPub* internal_default_instance() {
    return reinterpret_cast<const ServerInfoPub*>(
               &_ServerInfoPub_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ServerInfoPub& a, ServerInfoPub& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfoPub* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfoPub* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoPub* New() const final {
    return CreateMaybeMessage<ServerInfoPub>(nullptr);
  }

  ServerInfoPub* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfoPub>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerInfoPub& from);
  void MergeFrom(const ServerInfoPub& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoPub* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoSimple.ServerInfoPub";
  }
  protected:
  explicit ServerInfoPub(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_5fsimple_2eproto);
    return ::descriptor_table_pb_5fsimple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHelloFieldNumber = 1,
  };
  // string hello = 1;
  void clear_hello();
  const std::string& hello() const;
  void set_hello(const std::string& value);
  void set_hello(std::string&& value);
  void set_hello(const char* value);
  void set_hello(const char* value, size_t size);
  std::string* mutable_hello();
  std::string* release_hello();
  void set_allocated_hello(std::string* hello);
  private:
  const std::string& _internal_hello() const;
  void _internal_set_hello(const std::string& value);
  std::string* _internal_mutable_hello();
  public:

  // @@protoc_insertion_point(class_scope:ProtoSimple.ServerInfoPub)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hello_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_5fsimple_2eproto;
};
// -------------------------------------------------------------------

class ServerInfoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoSimple.ServerInfoReq) */ {
 public:
  inline ServerInfoReq() : ServerInfoReq(nullptr) {}
  virtual ~ServerInfoReq();

  ServerInfoReq(const ServerInfoReq& from);
  ServerInfoReq(ServerInfoReq&& from) noexcept
    : ServerInfoReq() {
    *this = ::std::move(from);
  }

  inline ServerInfoReq& operator=(const ServerInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfoReq& operator=(ServerInfoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfoReq* internal_default_instance() {
    return reinterpret_cast<const ServerInfoReq*>(
               &_ServerInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ServerInfoReq& a, ServerInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoReq* New() const final {
    return CreateMaybeMessage<ServerInfoReq>(nullptr);
  }

  ServerInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerInfoReq& from);
  void MergeFrom(const ServerInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoSimple.ServerInfoReq";
  }
  protected:
  explicit ServerInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_5fsimple_2eproto);
    return ::descriptor_table_pb_5fsimple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoSimple.ServerInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_5fsimple_2eproto;
};
// -------------------------------------------------------------------

class ServerInfoRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoSimple.ServerInfoRsp) */ {
 public:
  inline ServerInfoRsp() : ServerInfoRsp(nullptr) {}
  virtual ~ServerInfoRsp();

  ServerInfoRsp(const ServerInfoRsp& from);
  ServerInfoRsp(ServerInfoRsp&& from) noexcept
    : ServerInfoRsp() {
    *this = ::std::move(from);
  }

  inline ServerInfoRsp& operator=(const ServerInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfoRsp& operator=(ServerInfoRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerInfoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfoRsp* internal_default_instance() {
    return reinterpret_cast<const ServerInfoRsp*>(
               &_ServerInfoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ServerInfoRsp& a, ServerInfoRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfoRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfoRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoRsp* New() const final {
    return CreateMaybeMessage<ServerInfoRsp>(nullptr);
  }

  ServerInfoRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfoRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerInfoRsp& from);
  void MergeFrom(const ServerInfoRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoSimple.ServerInfoRsp";
  }
  protected:
  explicit ServerInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_5fsimple_2eproto);
    return ::descriptor_table_pb_5fsimple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kMemorySizeFieldNumber = 3,
    kDiskSizeFieldNumber = 4,
    kCoreCountFieldNumber = 2,
  };
  // string time = 1;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // string memorySize = 3;
  void clear_memorysize();
  const std::string& memorysize() const;
  void set_memorysize(const std::string& value);
  void set_memorysize(std::string&& value);
  void set_memorysize(const char* value);
  void set_memorysize(const char* value, size_t size);
  std::string* mutable_memorysize();
  std::string* release_memorysize();
  void set_allocated_memorysize(std::string* memorysize);
  private:
  const std::string& _internal_memorysize() const;
  void _internal_set_memorysize(const std::string& value);
  std::string* _internal_mutable_memorysize();
  public:

  // string diskSize = 4;
  void clear_disksize();
  const std::string& disksize() const;
  void set_disksize(const std::string& value);
  void set_disksize(std::string&& value);
  void set_disksize(const char* value);
  void set_disksize(const char* value, size_t size);
  std::string* mutable_disksize();
  std::string* release_disksize();
  void set_allocated_disksize(std::string* disksize);
  private:
  const std::string& _internal_disksize() const;
  void _internal_set_disksize(const std::string& value);
  std::string* _internal_mutable_disksize();
  public:

  // int32 coreCount = 2;
  void clear_corecount();
  ::PROTOBUF_NAMESPACE_ID::int32 corecount() const;
  void set_corecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_corecount() const;
  void _internal_set_corecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoSimple.ServerInfoRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memorysize_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr disksize_;
  ::PROTOBUF_NAMESPACE_ID::int32 corecount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_5fsimple_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PingPongReq

// string content = 1;
inline void PingPongReq::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PingPongReq::content() const {
  // @@protoc_insertion_point(field_get:ProtoSimple.PingPongReq.content)
  return _internal_content();
}
inline void PingPongReq::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:ProtoSimple.PingPongReq.content)
}
inline std::string* PingPongReq::mutable_content() {
  // @@protoc_insertion_point(field_mutable:ProtoSimple.PingPongReq.content)
  return _internal_mutable_content();
}
inline const std::string& PingPongReq::_internal_content() const {
  return content_.Get();
}
inline void PingPongReq::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PingPongReq::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoSimple.PingPongReq.content)
}
inline void PingPongReq::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoSimple.PingPongReq.content)
}
inline void PingPongReq::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoSimple.PingPongReq.content)
}
inline std::string* PingPongReq::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PingPongReq::release_content() {
  // @@protoc_insertion_point(field_release:ProtoSimple.PingPongReq.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PingPongReq::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoSimple.PingPongReq.content)
}

// -------------------------------------------------------------------

// PingPongRsp

// string content = 1;
inline void PingPongRsp::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PingPongRsp::content() const {
  // @@protoc_insertion_point(field_get:ProtoSimple.PingPongRsp.content)
  return _internal_content();
}
inline void PingPongRsp::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:ProtoSimple.PingPongRsp.content)
}
inline std::string* PingPongRsp::mutable_content() {
  // @@protoc_insertion_point(field_mutable:ProtoSimple.PingPongRsp.content)
  return _internal_mutable_content();
}
inline const std::string& PingPongRsp::_internal_content() const {
  return content_.Get();
}
inline void PingPongRsp::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PingPongRsp::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoSimple.PingPongRsp.content)
}
inline void PingPongRsp::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoSimple.PingPongRsp.content)
}
inline void PingPongRsp::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoSimple.PingPongRsp.content)
}
inline std::string* PingPongRsp::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PingPongRsp::release_content() {
  // @@protoc_insertion_point(field_release:ProtoSimple.PingPongRsp.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PingPongRsp::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoSimple.PingPongRsp.content)
}

// -------------------------------------------------------------------

// DaytimeReq

// -------------------------------------------------------------------

// DaytimeRsp

// string time = 1;
inline void DaytimeRsp::clear_time() {
  time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DaytimeRsp::time() const {
  // @@protoc_insertion_point(field_get:ProtoSimple.DaytimeRsp.time)
  return _internal_time();
}
inline void DaytimeRsp::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:ProtoSimple.DaytimeRsp.time)
}
inline std::string* DaytimeRsp::mutable_time() {
  // @@protoc_insertion_point(field_mutable:ProtoSimple.DaytimeRsp.time)
  return _internal_mutable_time();
}
inline const std::string& DaytimeRsp::_internal_time() const {
  return time_.Get();
}
inline void DaytimeRsp::_internal_set_time(const std::string& value) {
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DaytimeRsp::set_time(std::string&& value) {
  
  time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoSimple.DaytimeRsp.time)
}
inline void DaytimeRsp::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoSimple.DaytimeRsp.time)
}
inline void DaytimeRsp::set_time(const char* value,
    size_t size) {
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoSimple.DaytimeRsp.time)
}
inline std::string* DaytimeRsp::_internal_mutable_time() {
  
  return time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DaytimeRsp::release_time() {
  // @@protoc_insertion_point(field_release:ProtoSimple.DaytimeRsp.time)
  return time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DaytimeRsp::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoSimple.DaytimeRsp.time)
}

// -------------------------------------------------------------------

// DiscardReq

// string content = 1;
inline void DiscardReq::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DiscardReq::content() const {
  // @@protoc_insertion_point(field_get:ProtoSimple.DiscardReq.content)
  return _internal_content();
}
inline void DiscardReq::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:ProtoSimple.DiscardReq.content)
}
inline std::string* DiscardReq::mutable_content() {
  // @@protoc_insertion_point(field_mutable:ProtoSimple.DiscardReq.content)
  return _internal_mutable_content();
}
inline const std::string& DiscardReq::_internal_content() const {
  return content_.Get();
}
inline void DiscardReq::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DiscardReq::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoSimple.DiscardReq.content)
}
inline void DiscardReq::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoSimple.DiscardReq.content)
}
inline void DiscardReq::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoSimple.DiscardReq.content)
}
inline std::string* DiscardReq::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DiscardReq::release_content() {
  // @@protoc_insertion_point(field_release:ProtoSimple.DiscardReq.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DiscardReq::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoSimple.DiscardReq.content)
}

// -------------------------------------------------------------------

// DiscardRsp

// int32 size = 1;
inline void DiscardRsp::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiscardRsp::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiscardRsp::size() const {
  // @@protoc_insertion_point(field_get:ProtoSimple.DiscardRsp.size)
  return _internal_size();
}
inline void DiscardRsp::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void DiscardRsp::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:ProtoSimple.DiscardRsp.size)
}

// int32 total = 2;
inline void DiscardRsp::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiscardRsp::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiscardRsp::total() const {
  // @@protoc_insertion_point(field_get:ProtoSimple.DiscardRsp.total)
  return _internal_total();
}
inline void DiscardRsp::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void DiscardRsp::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:ProtoSimple.DiscardRsp.total)
}

// -------------------------------------------------------------------

// ServerInfoPub

// string hello = 1;
inline void ServerInfoPub::clear_hello() {
  hello_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerInfoPub::hello() const {
  // @@protoc_insertion_point(field_get:ProtoSimple.ServerInfoPub.hello)
  return _internal_hello();
}
inline void ServerInfoPub::set_hello(const std::string& value) {
  _internal_set_hello(value);
  // @@protoc_insertion_point(field_set:ProtoSimple.ServerInfoPub.hello)
}
inline std::string* ServerInfoPub::mutable_hello() {
  // @@protoc_insertion_point(field_mutable:ProtoSimple.ServerInfoPub.hello)
  return _internal_mutable_hello();
}
inline const std::string& ServerInfoPub::_internal_hello() const {
  return hello_.Get();
}
inline void ServerInfoPub::_internal_set_hello(const std::string& value) {
  
  hello_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerInfoPub::set_hello(std::string&& value) {
  
  hello_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoSimple.ServerInfoPub.hello)
}
inline void ServerInfoPub::set_hello(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hello_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoSimple.ServerInfoPub.hello)
}
inline void ServerInfoPub::set_hello(const char* value,
    size_t size) {
  
  hello_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoSimple.ServerInfoPub.hello)
}
inline std::string* ServerInfoPub::_internal_mutable_hello() {
  
  return hello_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerInfoPub::release_hello() {
  // @@protoc_insertion_point(field_release:ProtoSimple.ServerInfoPub.hello)
  return hello_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerInfoPub::set_allocated_hello(std::string* hello) {
  if (hello != nullptr) {
    
  } else {
    
  }
  hello_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hello,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoSimple.ServerInfoPub.hello)
}

// -------------------------------------------------------------------

// ServerInfoReq

// -------------------------------------------------------------------

// ServerInfoRsp

// string time = 1;
inline void ServerInfoRsp::clear_time() {
  time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerInfoRsp::time() const {
  // @@protoc_insertion_point(field_get:ProtoSimple.ServerInfoRsp.time)
  return _internal_time();
}
inline void ServerInfoRsp::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:ProtoSimple.ServerInfoRsp.time)
}
inline std::string* ServerInfoRsp::mutable_time() {
  // @@protoc_insertion_point(field_mutable:ProtoSimple.ServerInfoRsp.time)
  return _internal_mutable_time();
}
inline const std::string& ServerInfoRsp::_internal_time() const {
  return time_.Get();
}
inline void ServerInfoRsp::_internal_set_time(const std::string& value) {
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerInfoRsp::set_time(std::string&& value) {
  
  time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoSimple.ServerInfoRsp.time)
}
inline void ServerInfoRsp::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoSimple.ServerInfoRsp.time)
}
inline void ServerInfoRsp::set_time(const char* value,
    size_t size) {
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoSimple.ServerInfoRsp.time)
}
inline std::string* ServerInfoRsp::_internal_mutable_time() {
  
  return time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerInfoRsp::release_time() {
  // @@protoc_insertion_point(field_release:ProtoSimple.ServerInfoRsp.time)
  return time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerInfoRsp::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoSimple.ServerInfoRsp.time)
}

// int32 coreCount = 2;
inline void ServerInfoRsp::clear_corecount() {
  corecount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoRsp::_internal_corecount() const {
  return corecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoRsp::corecount() const {
  // @@protoc_insertion_point(field_get:ProtoSimple.ServerInfoRsp.coreCount)
  return _internal_corecount();
}
inline void ServerInfoRsp::_internal_set_corecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  corecount_ = value;
}
inline void ServerInfoRsp::set_corecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_corecount(value);
  // @@protoc_insertion_point(field_set:ProtoSimple.ServerInfoRsp.coreCount)
}

// string memorySize = 3;
inline void ServerInfoRsp::clear_memorysize() {
  memorysize_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerInfoRsp::memorysize() const {
  // @@protoc_insertion_point(field_get:ProtoSimple.ServerInfoRsp.memorySize)
  return _internal_memorysize();
}
inline void ServerInfoRsp::set_memorysize(const std::string& value) {
  _internal_set_memorysize(value);
  // @@protoc_insertion_point(field_set:ProtoSimple.ServerInfoRsp.memorySize)
}
inline std::string* ServerInfoRsp::mutable_memorysize() {
  // @@protoc_insertion_point(field_mutable:ProtoSimple.ServerInfoRsp.memorySize)
  return _internal_mutable_memorysize();
}
inline const std::string& ServerInfoRsp::_internal_memorysize() const {
  return memorysize_.Get();
}
inline void ServerInfoRsp::_internal_set_memorysize(const std::string& value) {
  
  memorysize_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerInfoRsp::set_memorysize(std::string&& value) {
  
  memorysize_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoSimple.ServerInfoRsp.memorySize)
}
inline void ServerInfoRsp::set_memorysize(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  memorysize_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoSimple.ServerInfoRsp.memorySize)
}
inline void ServerInfoRsp::set_memorysize(const char* value,
    size_t size) {
  
  memorysize_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoSimple.ServerInfoRsp.memorySize)
}
inline std::string* ServerInfoRsp::_internal_mutable_memorysize() {
  
  return memorysize_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerInfoRsp::release_memorysize() {
  // @@protoc_insertion_point(field_release:ProtoSimple.ServerInfoRsp.memorySize)
  return memorysize_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerInfoRsp::set_allocated_memorysize(std::string* memorysize) {
  if (memorysize != nullptr) {
    
  } else {
    
  }
  memorysize_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memorysize,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoSimple.ServerInfoRsp.memorySize)
}

// string diskSize = 4;
inline void ServerInfoRsp::clear_disksize() {
  disksize_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerInfoRsp::disksize() const {
  // @@protoc_insertion_point(field_get:ProtoSimple.ServerInfoRsp.diskSize)
  return _internal_disksize();
}
inline void ServerInfoRsp::set_disksize(const std::string& value) {
  _internal_set_disksize(value);
  // @@protoc_insertion_point(field_set:ProtoSimple.ServerInfoRsp.diskSize)
}
inline std::string* ServerInfoRsp::mutable_disksize() {
  // @@protoc_insertion_point(field_mutable:ProtoSimple.ServerInfoRsp.diskSize)
  return _internal_mutable_disksize();
}
inline const std::string& ServerInfoRsp::_internal_disksize() const {
  return disksize_.Get();
}
inline void ServerInfoRsp::_internal_set_disksize(const std::string& value) {
  
  disksize_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerInfoRsp::set_disksize(std::string&& value) {
  
  disksize_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoSimple.ServerInfoRsp.diskSize)
}
inline void ServerInfoRsp::set_disksize(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  disksize_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoSimple.ServerInfoRsp.diskSize)
}
inline void ServerInfoRsp::set_disksize(const char* value,
    size_t size) {
  
  disksize_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoSimple.ServerInfoRsp.diskSize)
}
inline std::string* ServerInfoRsp::_internal_mutable_disksize() {
  
  return disksize_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerInfoRsp::release_disksize() {
  // @@protoc_insertion_point(field_release:ProtoSimple.ServerInfoRsp.diskSize)
  return disksize_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerInfoRsp::set_allocated_disksize(std::string* disksize) {
  if (disksize != nullptr) {
    
  } else {
    
  }
  disksize_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), disksize,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoSimple.ServerInfoRsp.diskSize)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoSimple

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pb_5fsimple_2eproto
